material {
    name : step2,
    shadingModel : lit,
    transparency: twoPassesTwoSides,
    blending: fade,
    culling: none,
    parameters : [
        { type : float3, name : baseColor },
        { type : float,  name : roughness },
        
        { type : float,  name : greatCircle },
        { type : float,  name : luneAlpha },
        { type : float,  name : luneExpansion },
        { type : float,  name : antipodeAlpha },

        { type : float,  name : clearCoat },
        { type : float,  name : clearCoatRoughness }
    ],
}

fragment {

    mat4 rotationX(in float angle) {
        return mat4(1.0, 0, 0, 0, 0, cos(angle), -sin(angle), 0, 0, sin(angle), cos(angle), 0, 0, 0, 0, 1);
    }

    mat4 rotationY(in float angle) {
        return mat4( cos(angle), 0, sin(angle), 0, 0, 1.0, 0, 0, -sin(angle), 0, cos(angle), 0, 0, 0, 0, 1);
    }

    mat4 rotationZ(in float angle) {
        return mat4( cos(angle), -sin(angle), 0, 0, sin(angle), cos(angle), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    }

    vec3 get_plane_normal(float theta) {
        vec3 n = vec3(sin(theta), cos(theta), 0.0);
        return (vec4(n, 0) * rotationX(0.0)).xyz;
    }

    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        material.baseColor.rgb = materialParams.baseColor;
        material.baseColor.a = 1.0;

        vec4 wpos = vec4(getWorldPosition() + getWorldOffset(), 1.0);

        const float D = 0.0;
        const float T = 0.01;

        float luneExpansion = 1.0 - pow(1.0 - materialParams.luneExpansion, 8.0);
        float A_theta = mix(0.1, -0.3 - 3.14 / 2.0, luneExpansion);
        float B_theta = mix(0.4, -0.3 + 3.14 / 2.0, luneExpansion);

        {
            float theta = A_theta;
            vec3 N = get_plane_normal(theta);
            float d1 = dot(wpos, vec4(N, D + T));
            float d2 = dot(wpos, vec4(N, D - T));
            float a = step(d2, 0.0) * step(0.0, d1);
            a *= materialParams.greatCircle;
            material.baseColor.rgb *= 1.0 - a;
            material.baseColor.a *= 1.0 - a;
        }

        {
            float theta = B_theta;
            vec3 N = get_plane_normal(theta);
            float d1 = dot(wpos, vec4(N, D + T));
            float d2 = dot(wpos, vec4(N, D - T));
            float a = step(d2, 0.0) * step(0.0, d1);
            a *= materialParams.luneAlpha;
            material.baseColor.rgb *= 1.0 - a;
            material.baseColor.a *= 1.0 - a;
        }

        material.baseColor.b *= 0.5;

        {
            float theta0 = A_theta;
            float theta1 = B_theta;
            vec3 N0 = get_plane_normal(theta0);
            vec3 N1 = get_plane_normal(theta1);
            float d1 = dot(wpos, vec4(N0, D));
            float d2 = dot(wpos, vec4(N1, D));
            float a = step(d2, 0.0) * step(0.0, d1);
            a *= materialParams.luneAlpha;
            material.baseColor.b *= 1.0 - a;
        }

        {
            float theta1 = A_theta;
            float theta0 = B_theta;
            vec3 N0 = get_plane_normal(theta0);
            vec3 N1 = get_plane_normal(theta1);
            float d1 = dot(wpos, vec4(N0, D));
            float d2 = dot(wpos, vec4(N1, D));
            float a = step(d2, 0.0) * step(0.0, d1);
            a *= materialParams.luneAlpha * materialParams.antipodeAlpha;
            material.baseColor.b *= 1.0 - a;
        }

        float fadeIn = materialParams.greatCircle;
        material.baseColor.a = mix(1.0, 0.7 + 0.3 * (1.0 - material.baseColor.a), fadeIn);

        material.roughness = materialParams.roughness;
        material.clearCoat = materialParams.clearCoat;
        material.clearCoatRoughness = materialParams.clearCoatRoughness;
    }
}