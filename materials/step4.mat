material {
    name : step4,
    shadingModel : lit,
    transparency: twoPassesTwoSides,
    blending: fade,
    culling: none,
    parameters : [
        { type : float3, name : baseColor },
        { type : float,  name : roughness },

        { type : float,  name : fadeInPolygon },

        { type : float,  name : clearCoat },
        { type : float,  name : clearCoatRoughness }
    ],
}

fragment {

    const float kLineThickness = 0.01;
    const vec4 kLineColor = vec4(0.0, 0.0, 0.0, 1.0);

    vec4 rotate(vec4 pt, vec3 axis, float angle) {
        float s = sin(angle);
        float c = cos(angle);
        float oc = 1.0 - c;
        return pt * mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                         oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                         oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                         0.0,                                0.0,                                0.0,                                1.0);
    }

    // Returns 0 or 1. The latter is returned only if the given point is both inside the half-space of planeA and inside
    // the reverse half-space of planeB. The given t value is a fraction in [0,1] used to animate planeB to create the
    // illusion that the line is being gradually inscribed.
    float between(vec4 pos, vec4 planeA, vec4 planeB, float t) {
        planeA.w = kLineThickness;
        planeB.w = kLineThickness;
        float a = step(0.0, dot(pos, planeA));
        planeB = normalize(mix(planeA, -planeB, t));
        float b = step(dot(pos, planeB), 0.0);
        return a * b;
    }

    // Returns a number in [0,1] where 0 is outside a thick geodesic line segment and 1 is inside. Fractional values may
    // be returned to achieve smooth antialiasing. The geodesic is defined as the intersection of a great circle with
    // two bounding half-spaces (lowerClip and upperClip). The great circle is the intersection of "plane" with the unit
    // sphere.
    //
    // To draw a thick lines, thick function splits "plane" into two planes by shifting it along its normal and checking
    // that the given point "pos" is between the shifted planes. The given t value is a fraction in [0,1] used to 
    // animate the bounding planes to create the illusion that the line is being gradually inscribed.
    float geodesic(vec4 pos, vec4 plane, vec4 lowerClip, vec4 upperClip, float t) {
        float d1 = dot(pos, vec4(plane.xyz, +kLineThickness));
        float d2 = dot(pos, vec4(plane.xyz, -kLineThickness));
        float d3 = between(pos, lowerClip, upperClip, t);
        return step(0.0, d1) * step(d2, 0.0) * d3;
    }

    void material(inout MaterialInputs material) {
        prepareMaterial(material);

        vec4 color = vec4(materialParams.baseColor, 1.0);
        color.b *= 0.5;

        vec4 wpos = vec4(getWorldPosition() + getWorldOffset(), 1.0);
        vec4 K = vec4(0, 0, 1, 0);
        float outwardTheta = 80.0 * PI / 180.0; // <== This angle determines how large the polygon is.

        vec4 plane[4];
        float inscribe[4];
        float fadeIn = materialParams.fadeInPolygon;
        float inside = 1.0;

        for (int i = 0; i < 4; i++) {
            float f = float(i);
            float theta = 2.0 * PI * f / 4.0;
            plane[i] = rotate(K, vec3(sin(theta), cos(theta), 0.0), outwardTheta);
            inscribe[i] = clamp((fadeIn * 4.0 - f), 0.0, 1.0);
            inside *= step(0.0, dot(wpos, plane[i]));
        }

        color = mix(color, kLineColor, geodesic(wpos, plane[0], plane[1], plane[3], inscribe[0]));
        color = mix(color, kLineColor, geodesic(wpos, plane[1], plane[2], plane[0], inscribe[1]));
        color = mix(color, kLineColor, geodesic(wpos, plane[2], plane[3], plane[1], inscribe[2]));
        color = mix(color, kLineColor, geodesic(wpos, plane[3], plane[0], plane[2], inscribe[3]));

        color.rgb *= mix(1.0, 1.0 - 0.5 * inside, inscribe[3]);
        material.baseColor = color;
        material.roughness = materialParams.roughness;
        material.clearCoat = materialParams.clearCoat;
        material.clearCoatRoughness = materialParams.clearCoatRoughness;
    }
}